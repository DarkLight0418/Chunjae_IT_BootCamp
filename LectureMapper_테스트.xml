<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
 * ==========================================================
 *  LectureMapper.xml
 * ==========================================================
 *  @version   1.0
 *  @author    khj00
 *  @since     2025-10-18
 *  @purpose   강의 목록 조회 및 페이징 처리를 담당하는 MyBatis 매퍼 파일
 *
 *  [주요 기능]
 *   ▸ selectAll : 검색 조건 및 페이지 정보를 기반으로 강의 목록을 조회
 *   ▸ countAll  : 동일한 조건으로 전체 데이터 개수를 조회 (페이징 계산용)
 *
 *  [참고 사항]
 *   ▸ LIMIT 과 OFFSET 은 Page.Request 클래스의 size / startPage 를 그대로 사용
 *   ▸ LectureDTO.Search 의 filter 값(title, difficulty, teacher)에 따라 WHERE 절이 동적으로 구성됨
 *   ▸ Teacher 테이블과 JOIN 하여 강의 담당 교사 정보도 함께 조회
 * ==========================================================
-->

<mapper namespace="studyon.app.layer.domain.lecture.mapper.LectureMapper">

    <!-- ======================================================
         ▣ 강의 목록 조회 (페이징 + 검색)
         ====================================================== -->
    <select id="selectAll" resultType="studyon.app.layer.domain.lecture.LectureDTO.Read">
        SELECT 
            l.lecture_id,                 <!-- 강의 고유 ID -->
            l.title,                      <!-- 강의 제목 -->
            l.description,                <!-- 강의 설명 -->
            l.price,                      <!-- 가격 -->
            l.average_rate,               <!-- 평균 평점 -->
            l.like_count,                 <!-- 좋아요 수 -->
            l.total_students,             <!-- 수강생 수 -->
            l.publish_date,               <!-- 개시일 -->
            l.difficulty,                 <!-- 난이도 (ENUM: BASIC, ADVANCED 등) -->
            l.on_sale,                    <!-- 판매 여부 (BIT) -->
            t.teacher_id,                 <!-- 교사 ID -->
            t.subject,                    <!-- 교사 담당 과목 -->
            t.average_rating AS teacher_rating <!-- 교사 평균 평점 -->
        FROM lecture l
        JOIN teacher t ON l.teacher_id = t.teacher_id
        <where>
            <!-- ▸ 제목 검색 -->
            <if test="rq.filter eq 'title'">
                l.title LIKE CONCAT('%', #{rq.keyword}, '%')
            </if>

            <!-- ▸ 난이도 검색 -->
            <if test="rq.filter eq 'difficulty'">
                l.difficulty = #{rq.keyword}
            </if>

            <!-- ▸ 교사 과목 검색 -->
            <if test="rq.filter eq 'teacher'">
                t.subject LIKE CONCAT('%', #{rq.keyword}, '%')
            </if>
        </where>
        ORDER BY l.publish_date DESC     <!-- 최신 등록 순 -->
        LIMIT #{prq.size}                <!-- 페이지당 데이터 개수 -->
        OFFSET #{prq.startPage}          <!-- 시작 인덱스 (page * size) -->
    </select>

    <!-- ======================================================
         ▣ 전체 데이터 개수 조회 (페이징 계산용)
         ====================================================== -->
    <select id="countAll" resultType="Integer">
        SELECT COUNT(*)
        FROM lecture l
        JOIN teacher t ON l.teacher_id = t.teacher_id
        <where>
            <!-- ▸ 제목 검색 -->
            <if test="rq.filter eq 'title'">
                l.title LIKE CONCAT('%', #{rq.keyword}, '%')
            </if>

            <!-- ▸ 난이도 검색 -->
            <if test="rq.filter eq 'difficulty'">
                l.difficulty = #{rq.keyword}
            </if>

            <!-- ▸ 교사 과목 검색 -->
            <if test="rq.filter eq 'teacher'">
                t.subject LIKE CONCAT('%', #{rq.keyword}, '%')
            </if>
        </where>
    </select>

</mapper>
