/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.44
 * Generated at: 2025-08-12 06:41:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fjsp.designer;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class update_005fpage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

 // %! - 정의문, 선언만 해줄 것
	String maria = "org.mariadb.jdbc.Driver";
	String mariaUrl = "jdbc:mariadb://127.0.0.1:3306/java_schema";
	Connection con;
	PreparedStatement pstmt;
	String sql = "select * from board where seq=?";
	public void jspInit(){  
		try{
			Class.forName(maria);
			pln("(1) 드라이버 로딩");

			con = DriverManager.getConnection(mariaUrl, "scott", "tiger");
			pln("(2) DB연결 성공");

			pstmt = con.prepareStatement(sql);
			pln("(3) stmt객체생성 성공");
		
		}catch(ClassNotFoundException cnfe){
		}catch(SQLException se){}
	}
	public void jspDestroy(){ 
		try{
			pstmt.close();
			con.close();
		}
		catch (SQLException se ){}
	}
	void pln(String str){
		System.out.println(str);
	}	

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
 

    //1. Take
	int seq = Integer.parseInt(request.getParameter("seq"));
	
	ResultSet rs = null;

	//2. DB에 insert 
	try {	
		pstmt.setInt(1, seq);
		rs = pstmt.executeQuery();

        System.out.println("modifyList seq :" + seq);		
        
		while(rs.next()){
			String writer = rs.getString(1);
			String email = rs.getString(2);
			String subject = rs.getString(3);
			String content = rs.getString(4);
			Date rdate = rs.getDate(5);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>내용 수정</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>게시판 글 수정</h1>\r\n");
      out.write("    <form name=\"수정 폼\" action=\"update.jsp\" method=\"post\">\r\n");
      out.write("        <table border=\"1\" width=\"400\" height=\"300\">\r\n");
      out.write("	      <tr>\r\n");
      out.write("		     <td width=\"30%\" colspan=\"4\" align=\"center\"><h2>수정 폼</h2></td> \r\n");
      out.write("		  </tr>\r\n");
      out.write("\r\n");
      out.write("		  <tr>\r\n");
      out.write("		     <th width=\"30%\">작성자 이름</th> \r\n");
      out.write("			 <td><input name=");
      out.print(writer);
      out.write(" size=\"20\" readonly=\"readonly\"></td> <!-- 입력을 막기 위한 readonly 속성(말 그대로 읽는 것만!) -->\r\n");
      out.write("		  </tr>\r\n");
      out.write("\r\n");
      out.write("		  <tr>\r\n");
      out.write("		     <th width=\"30%\">이메일</th> \r\n");
      out.write("			 <td><input name=");
      out.print(email);
      out.write(" size=\"20\"></td>\r\n");
      out.write("		  </tr>\r\n");
      out.write("\r\n");
      out.write("		  <tr>\r\n");
      out.write("		     <th width=\"30%\">제목</th> \r\n");
      out.write("			 <td><input name=");
      out.print(subject);
      out.write(" size=\"20\"></td>\r\n");
      out.write("		  </tr>\r\n");
      out.write("		  <tr>\r\n");
      out.write("		     <th width=\"30%\">내용</th> \r\n");
      out.write("			 <td><input name=");
      out.print(content);
      out.write(" style=\"width:280px; height:120px; align:center;\"></td>\r\n");
      out.write("		  </tr>\r\n");
      out.write("		  <tr>\r\n");
      out.write("		     <td colspan=\"2\" align=\"center\">\r\n");
      out.write("			     <input type=\"submit\" value=\"수정\"/>\r\n");
      out.write("				 <input type=\"reset\" value=\"초기화\"/>\r\n");
      out.write("			 </td> \r\n");
      out.write("		  </tr>\r\n");
      out.write("	   </table>\r\n");
      out.write("    </form>\r\n");
      out.write("	<a href=\"index.html\">인덱스 창으로</a>\r\n");
      out.write("	<a href=\"list.do\">글 목록으로</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");

		}
    } catch(SQLException se){
        System.out.println("sql 예외:" + se);
	} finally{
		try{
			rs.close();
		}catch(SQLException sec){
            System.out.println("sql close 예외 : " + sec);
        }
	}


      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
