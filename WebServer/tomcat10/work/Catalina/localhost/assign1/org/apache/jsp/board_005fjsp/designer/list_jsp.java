/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.44
 * Generated at: 2025-08-12 05:17:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board_005fjsp.designer;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


    String maria = "org.mariadb.jdbc.Driver";
	String mariaUrl = "jdbc:mariadb://127.0.0.1:3306/java_schema";
	Connection con;
	Statement stmt;
	public void jspInit(){ //DB연결 
		try{
			Class.forName(maria);
			pln("(1) 드라이버 로딩");
			con = DriverManager.getConnection(mariaUrl, "scott", "tiger");
			pln("(2) DB연결 성공");
			stmt = con.createStatement();
			pln("(3) stmt객체생성 성공");
		}catch(ClassNotFoundException cnfe){
			pln("(1) 드라이버 실패");
		}catch(SQLException se){
			pln("(2) DB연결 or (3) stmt객체생성 실패: " + se);
		}
	}  
	public void jspDestroy(){ //DB해제 
		try{
			stmt.close();
			con.close();
		}
		catch (SQLException se){}
	}
	void pln(String str){
		System.out.println(str);
	}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write("<!-- //지시어 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<meta charset='utf-8'>\r\n");
      out.write("<style>\r\n");
      out.write("table, th, td {\r\n");
      out.write("border: 1px solid black;\r\n");
      out.write("border-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("th, td {\r\n");
      out.write("padding: 5px;\r\n");
      out.write("}\r\n");
      out.write("a { text-decoration:none }\r\n");
      out.write("</style>\r\n");
      out.write("<center>\r\n");
      out.write("	<hr width='950' size='2' noshade>\r\n");
      out.write("	<h2>게시판(JSP)</h2>\r\n");
      out.write("	&nbsp;&nbsp;&nbsp;\r\n");
      out.write("	<a href='input.jsp'>글쓰기</a>\r\n");
      out.write("	&nbsp;&nbsp;&nbsp;\r\n");
      out.write("	<a href='index.html'>인덱스</a>\r\n");
      out.write("	<hr width='950' size='2' noshade>\r\n");
      out.write("</center>\r\n");
      out.write("<table border='1' width='950' align='center' cellpadding='2'>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th align='center' width='10%'>글번호</th>\r\n");
      out.write("		<th align='center' width='15%'>작성자</th>\r\n");
      out.write("		<th align='center' width='25%'>이메일</th>\r\n");
      out.write("		<th align='center' width='20%'>글제목</th>\r\n");
      out.write("		<th align='center' width='10%'>내용 요약</th>\r\n");
      out.write("		<th align='center' width='15%'>날짜</th>\r\n");
      out.write("		<th align='center' width='5%'>삭제</th>\r\n");
      out.write("	</tr>\r\n");
 
	String sql = "select * from BOARD order by SEQ desc";
	ResultSet rs = null;
	try {
		rs = stmt.executeQuery(sql);
		while(rs.next()){
			int seq = rs.getInt(1);
			String writer = rs.getString(2);
			String email = rs.getString(3);
			String subject = rs.getString(4);
			String content = rs.getString(5);
			Date rdate = rs.getDate(6);

      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td align='center'>");
      out.print(seq);
      out.write("</td>\r\n");
      out.write("		<td align='center'>");
      out.print(writer);
      out.write("</td>\r\n");
      out.write("		<td align='center'>");
      out.print(email);
      out.write("</td>\r\n");
      out.write("		<td align='center'>\r\n");
      out.write("			<a href='content.jsp?seq=");
      out.print(seq);
      out.write('\'');
      out.write('>');
      out.print(subject);
      out.write("</a>\r\n");
      out.write("		</td>\r\n");
      out.write("		<td align='center'>");
      out.print(content);
      out.write("</td>\r\n");
      out.write("		<td align='center'>");
      out.print(rdate);
      out.write("</td>\r\n");
      out.write("		<td align='center'><a href='del.jsp?seq=");
      out.print(seq);
      out.write("'>삭제</a></td>\r\n");
      out.write("	</tr>\r\n");

}
	} catch(SQLException se) {
		System.out.println("sql 예외 : " + se);
	} finally{
		try{
			rs.close();
		}catch(SQLException se){}
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<hr width='950' size='2' noshade>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
